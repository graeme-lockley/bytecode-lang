pub const TokenKind = enum {
    EOS,
    Invalid,

    LiteralBoolFalse,
    LiteralBoolTrue,
    LiteralInt,
    LiteralString,

    Identifier,

    Fn,
    If,
    Let,
    While,

    AmpersandAmpersand,
    Bang,
    BangEqual,
    BarBar,
    Comma,
    Equal,
    EqualEqual,
    GreaterEqual,
    GreaterThan,
    LCurly,
    LessEqual,
    LessThan,
    LParen,
    Minus,
    Percentage,
    Plus,
    RCurly,
    RParen,
    Semicolon,
    Slash,
    Star,

    pub fn toString(self: TokenKind) []const u8 {
        switch (self) {
            TokenKind.EOS => return "end-of-stream",
            TokenKind.Invalid => return "invalid-token",
            TokenKind.LiteralBoolFalse => return "false",
            TokenKind.LiteralBoolTrue => return "true",
            TokenKind.LiteralInt => return "literal int",
            TokenKind.LiteralString => return "literal string",

            TokenKind.Identifier => return "identifier",

            TokenKind.Fn => return "fn",
            TokenKind.If => return "if",
            TokenKind.Let => return "let",
            TokenKind.While => return "while",

            TokenKind.AmpersandAmpersand => return "'&&'",
            TokenKind.Bang => return "'!'",
            TokenKind.BangEqual => return "'!='",
            TokenKind.BarBar => return "'||'",
            TokenKind.Comma => return "','",
            TokenKind.Equal => return "'='",
            TokenKind.EqualEqual => return "'=='",
            TokenKind.GreaterEqual => return "'>='",
            TokenKind.GreaterThan => return "'>'",
            TokenKind.LessEqual => return "'<='",
            TokenKind.LessThan => return "'<'",
            TokenKind.LCurly => return "'{'",
            TokenKind.LParen => return "'('",
            TokenKind.Minus => return "'-'",
            TokenKind.Percentage => return "'%'",
            TokenKind.Plus => return "'+'",
            TokenKind.RCurly => return "'}'",
            TokenKind.RParen => return "')'",
            TokenKind.Semicolon => return "';'",
            TokenKind.Slash => return "'/'",
            TokenKind.Star => return "'*'",
        }
    }
};
