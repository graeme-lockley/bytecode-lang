#!/usr/bin/env rebo

let CLI = import("cli")
let FS = import("fs")
let Path = import("path")

let C = import("./compiler.rebo") 
let BC = import("./bytecode.rebo") 
let P = import("./parser.rebo") 

let cli = CLI.parse({
   cmd: false,
   enforcing: true,
   opts: {
      literal: false
   }    
})

if len(cli.args) == 0 -> {
    println("Error: expected file name or code literal")
    exit(1)
}

if cli.opts.literal -> {
    println("Compiling code literal")
    let bc = P.parse(cli.args[0]) |> C.compile()
    println("Writing bytecode to out.bc")
    FS.writeFile("out.bc", bc)

    BC.print(bc)

    exit(0)
}

cli.args |> each(fn(file) {
    println("Compiling file: ", file)
    let code = FS.readFile(file)
    let bc = P.parse(code) |> C.compile()

    let [path, name, _] = file |> Path.split()
    let out = Path.join(path, name + ".bc")

    println("Writing bytecode to ", out)
    FS.writeFile(out, bc)
    BC.print(bc)
})
