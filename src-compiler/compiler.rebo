let Bytecode = import("./bytecode.rebo")
let Parser = import("./parser.rebo")

let compile(ast) {
   let bc = _codegen()
   let env = {}
   let globalOffset = 0

   ast |> each(fn(stmt)
      match stmt
      | { kind: "Var", name, value } -> {
         if env[name] != () -> raise { kind: "CompilerError", reason: "compile: Variable already defined", ast: stmt }

         let vtype = _compileExpr(bc, env, value)

         if vtype != "Int" -> raise { kind: "CompilerError", reason: "compile: Only Ints are supported", ast: stmt }

         env[stmt.name] := { kind: "Var", offset: globalOffset }
         globalOffset := globalOffset + 1
      }
      | { kind: "Print", args } -> {
         args |> each(fn(arg) {
            let vtype = _compileExpr(bc, env, arg)

            match vtype
            | "Bool" -> bc.appendInstruction(Bytecode.PRINTB)
            | "Int" -> bc.appendInstruction(Bytecode.PRINTI)
            | "String" -> bc.appendInstruction(Bytecode.PRINTS)
            | _ -> raise { kind: "CompilerError", reason: "compile: Incompatible type", ast: stmt }
         })
      }
      | { kind: "Println", args } -> {
         args |> each(fn(arg) {
            let vtype = _compileExpr(bc, env, arg)

            match vtype
            | "Bool" -> bc.appendInstruction(Bytecode.PRINTB)
            | "Int" -> bc.appendInstruction(Bytecode.PRINTI)
            | "String" -> bc.appendInstruction(Bytecode.PRINTS)
            | _ -> raise { kind: "CompilerError", reason: "compile: Incompatible type", ast: stmt }
         })
         bc.appendInstruction(Bytecode.PRINTLN)
      }
      | _ -> raise { kind: "CompilerError", reason: "compile: Not implemented", ast: stmt }
   )

   bc.code()
}

let _operatorMap = {
   Equals: [Bytecode.EQI, "Bool"],
   NotEquals: [Bytecode.NEQI, "Bool"],
   LessThan: [Bytecode.LTI, "Bool"],
   LessEquals: [Bytecode.LEI, "Bool"],
   GreaterThan: [Bytecode.GTI, "Bool"],
   GreaterEquals: [Bytecode.GEI, "Bool"],
   Add: [Bytecode.ADDI, "Int"],
   Subtract: [Bytecode.SUBTRACTI, "Int"],
   Multiply: [Bytecode.MULTIPLYI, "Int"],
   Divide: [Bytecode.DIVIDEI, "Int"],
   Modulus: [Bytecode.MODULUSI, "Int"]
}

let _compileExpr(bc, env, expr) =
   match expr
   | { kind: "Or", exprs } -> {
      if len(exprs) == 0 -> raise { kind: "CompilerError", reason: "_compileExpr: Or with no arguments", ast: expr }
       | len(exprs) == 1 -> _compileExpr(bc, env, exprs[0])
       | {
         let patches = []
         exprs |> each(fn(e) {
            _compileBoolExpr(bc, env, e)
            bc.appendInstruction(Bytecode.JMP_NEQ_ZERO)
            patches <! bc.address()
            bc.appendInt(0)
         })

         bc.appendInstruction(Bytecode.PUSHI)
         bc.appendInt(0)

         bc.appendInstruction(Bytecode.JMP)
         let patch = bc.address()
         bc.appendInt(0)

         patches |> each(fn(addr) {
            bc.patchInt(addr, bc.address())
         })

         bc.appendInstruction(Bytecode.PUSHI)
         bc.appendInt(1)

         bc.patchInt(patch, bc.address())

         "Bool"
      }
   }
   | { kind: "And", exprs } -> {
      if len(exprs) == 0 -> raise { kind: "CompilerError", reason: "_compileExpr: And with no arguments", ast: expr }
       | len(exprs) == 1 -> _compileExpr(bc, env, exprs[0])
       | {
         let patches = []
         exprs |> each(fn(e) {
            _compileBoolExpr(bc, env, e)
            bc.appendInstruction(Bytecode.JMP_EQ_ZERO)
            patches <! bc.address()
            bc.appendInt(0)
         })

         bc.appendInstruction(Bytecode.PUSHI)
         bc.appendInt(1)

         bc.appendInstruction(Bytecode.JMP)
         let patch = bc.address()
         bc.appendInt(0)

         patches |> each(fn(addr) {
            bc.patchInt(addr, bc.address())
         })

         bc.appendInstruction(Bytecode.PUSHI)
         bc.appendInt(0)

         bc.patchInt(patch, bc.address())

         "Bool"
      }
   }
   | { kind, lhs, rhs }  -> {
      let [op, vtype] = _operatorMap[kind]

      _compileIntExpr(bc, env, lhs)
      _compileIntExpr(bc, env, rhs)

      bc.appendInstruction(op)

      vtype
   }

   | { kind: "Identifier", value } -> {
      let var = env[value]

      if var == () -> raise { kind: "CompilerError", reason: "_compileExpr: Variable not found", ast: expr }

      bc.appendInstruction(Bytecode.PUSH)
      bc.appendInt(var.offset)

      "Int"
   }
   | { kind: "LiteralBool", value } -> {
      bc.appendInstruction(Bytecode.PUSHI)
      bc.appendInt(if value -> 1 | 0)

      "Bool"
   }
   | { kind: "LiteralInt", value } -> {
      bc.appendInstruction(Bytecode.PUSHI)
      bc.appendInt(value)

      "Int"
   }
   | { kind: "LiteralString", value } -> {
      bc.appendInstruction(Bytecode.PUSHS)
      bc.appendInt(len(value))
      bc.appendString(value)

      "String"
   }
   | _ -> raise { kind: "CompilerError", reason: "_compileExpr: Not implemented", ast: expr }


let _compileBoolExpr(bc, env, expr) {
   let vtype = _compileExpr(bc, env, expr)

   if vtype != "Bool" -> raise { kind: "CompilerError", reason: "_compileIntExpr: not a Bool", ast: expr }
}

let _compileIntExpr(bc, env, expr) {
   let vtype = _compileExpr(bc, env, expr)

   if vtype != "Int" -> raise { kind: "CompilerError", reason: "_compileIntExpr: not an Int", ast: expr }
}

let compilerDis(input) =
   Parser.parse(input) |> compile() |> Bytecode.disassemble()

let _codegen() {
   let bc = ""

   {
      appendInstruction: fn(op) {
         bc := bc + str(op, false)
      },
      appendInt: fn(n) {
         bc := bc + str([char(n % 256), char((n / 256) % 256), char((n / 65536) % 256), char((n / 16777216) % 256)], false)
      },
      appendString: fn(s) {
         bc := bc + s
      },
      code: fn() bc,
      address: fn() len(bc),
      patchInt: fn(addr, n) {
         let patch = str([char(n % 256), char((n / 256) % 256), char((n / 65536) % 256), char((n / 16777216) % 256)], false)

         bc := bc[:addr] + patch + bc[(addr + 4):]
      }
   }
}
